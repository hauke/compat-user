#!/bin/bash
set -e

source "`dirname $0`/config.sh"

ORIG_COMPAT_DATE_DIR="${COMPAT_DATE_DIR}"

FILE_POSTFIX=""
FLAGS=""
DEST_DIR="${OUTPUT_DIR}/${YEAR}/${MONTH}"

export GIT_COMPAT_TREE="$COMPAT_DIR"
export GIT_TREE="$LINUX_NEXT_DIR"

cd $WORKING_DIR || exit 2

function update_git_tree {
	echo "Dir: $1"
	cd "$1" || exit 2
	echo "git fetch $2 ($PWD)"
	git fetch $2
	git repack -d
	git reset --hard $2/master
}

update_git_tree $COMPAT_DRIVERS_DIR $COMPAT_DRIVERS_REMOTE
update_git_tree $COMPAT_DIR $COMPAT_REMOTE
update_git_tree $LINUX_NEXT_DIR $LINUX_NEXT_REMOTE

for i in noflags p c; do
	cd $COMPAT_DRIVERS_DIR

	if [[ $i != "noflags" ]]; then
		FLAGS="$FLAGS -${i}"
		# this will just be "pc" when using both
		# pendign patches and crap patches
		FILE_POSTFIX="${FILE_POSTFIX}$i"
	else
		FLAGS=""
		FILE_POSTFIX=""
	fi
	# NOTE: Although we have admin-refresh which does the two below
	# we do these individually to catch errors.
	rm -rf $COMPAT_DRIVERS_DIR/*
	rm -f $COMPAT_DRIVERS_DIR/.compat_*
	git checkout -f
	./scripts/admin-update.sh $FLAGS 2>&1 > /dev/null
	RET=$?
	if [ $RET -ne 0 ]; then
		echo -en "Error while updating from linux-next"
		if [[ $i = "noflags" ]]; then
			echo -en "\n"
		else
			echo -en "with flags: $FLAGS\n"
		fi
		exit $RET
	fi

	if [[ $i != "noflags" ]]; then
		OUTPUT_FILENAME_DATE_EXT="${OUTPUT_FILENAME_DATE}-${FILE_POSTFIX}"
		OUTPUT_FILENAME_EXT="${OUTPUT_FILENAME}-${FILE_POSTFIX}"
	else
		OUTPUT_FILENAME_DATE_EXT=${OUTPUT_FILENAME_DATE}
		OUTPUT_FILENAME_EXT=${OUTPUT_FILENAME}
	fi

	mkdir -p $STAGING
	rm -rf $STAGING/${OUTPUT_FILENAME_DATE_EXT}
	cp -a $COMPAT_DRIVERS_DIR $STAGING/${OUTPUT_FILENAME_DATE_EXT}
	rm -rf $STAGING/${OUTPUT_FILENAME_DATE_EXT}/.git/

	cd $STAGING

	tar -jcf ${OUTPUT_FILENAME_DATE_EXT}.tar.bz2 ${OUTPUT_FILENAME_DATE_EXT}/

	mkdir -p $DEST_DIR
	mkdir -p $DEST_DIR/reports

	# Only test this once, and only for the most complex tarballs
	if [[ $i = "noflags" ]]; then

		cd ${OUTPUT_FILENAME_DATE_EXT}/
		${COMPAT_DIR}/bin/ckmake
		if [[ $? -ne 0 ]]; then
			cd $STAGING
			rm -rf $STAGING/*
			exit 1
		fi

		rm -f $DEST_DIR/${OUTPUT_FILENAME_DATE_EXT}*.tar.bz2
		cd $STAGING

		bzip2 ${OUTPUT_FILENAME_DATE_EXT}/ckmake.log
		chmod 755 ${OUTPUT_FILENAME_DATE_EXT}/ckmake-report.log ${OUTPUT_FILENAME_DATE_EXT}/ckmake.log.bz2

		cp ${OUTPUT_FILENAME_DATE_EXT}/ckmake.log.bz2 $DEST_DIR/reports/ckmake-${DATE}.log.bz2
		cp ${OUTPUT_FILENAME_DATE_EXT}/ckmake-report.log $DEST_DIR/reports/ckmake-report-${DATE}.log

		cd $DEST_DIR/reports
		ln -sf ckmake-${DATE}.log.bz2 ckmake.log.bz2
		ln -sf ckmake-report-${DATE}.log ckmake-report.log
	fi

	mv -f $STAGING/${OUTPUT_FILENAME_DATE_EXT}.tar.bz2 $DEST_DIR

	ln -sf ${YEAR}/${MONTH}/${OUTPUT_FILENAME_DATE_EXT}.tar.bz2 $OUTPUT_DIR/${OUTPUT_FILENAME_EXT}.tar.bz2

	# The archiving is handled by archive-compat-wireless
	# This run is just for the top level directory.
	sha1sum $DEST_DIR/*.tar.bz2 > sha1sums.txt

	chmod 755 $DEST_DIR/*
done

cat $DEST_DIR/reports/ckmake-report.log
rm -rf $STAGING
